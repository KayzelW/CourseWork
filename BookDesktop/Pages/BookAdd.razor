@page "/book_add"
@using BookDesktop.Service
@using Classes
@using Microsoft.EntityFrameworkCore
@using Windows.UI.Popups
@using System.Text.RegularExpressions
@inject AppDbContext dbcontext
@inject NavigationManager navigation
@inject AuthService authService
@inject BookChangeService bookService

@if (IsLoading)
{
    <div>Загрузка</div>
}
else
{
    @if (CanEscape)
    {
        <Menu/>
    }

    <div class="w-50 m-auto">
        <h3>Добавление книги</h3>

        @if (HasError)
        {
            <div class="d-flex border border-warning">
                <div class="p-2 w-100">
                    <p>@MessageError</p>
                </div>
                <div class="p-2 flex-shrink-1">
                    <button type="button" class="btn btn-warning" onclick="@(() => { HasError = false; MessageError = ""; InvokeAsync(StateHasChanged); })">
                        Закрыть
                    </button>
                </div>
            </div>
        }

        <EditForm Model="@bookNew" OnValidSubmit="@BookCommit_change">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Название</label>
                <InputText class="form-control" @bind-Value="bookNew.Name" id="exampleInputEmail1"/>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Автор</label>
                <InputSelect @bind-Value="bookNew.AuthorId" class="form-control">
                    @foreach (var author in authors)
                    {
                        <option value="@author.Id">@author.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                @if (ShowGenres)
                {
                    <button type="button" class="btn btn-outline-secondary" onclick="@(() => { ShowGenres = !ShowGenres; InvokeAsync(StateHasChanged); })">Отобразить жанры</button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" onclick="@(() => { ShowGenres = !ShowGenres; InvokeAsync(StateHasChanged); })">Скрыть жанры</button>
                }
                @if (ShowGenres)
                {
                    <div class="card text-bg-primary mb-3" style="width: 18rem;">
                        <ul class="list-group list-group-flush">
                            <div class="card-header">Жанры</div>
                            <div class="card-body">
                                <table>
                                    @foreach (var genre in genres)
                                    {
                                        <tr>
                                            <td>
                                                <input type="checkbox" class="list-group-item" @bind="checkedGenres[genre.Id]"/>
                                            </td>
                                            <td>
                                                <label>@genre.Name</label>
                                            </td>
                                        </tr>
                                        <br/>
                                    }
                                </table>
                            </div>
                        </ul>
                    </div>
                }
            </div>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Стоимость</label>
                <InputNumber class="form-control" @bind-Value="bookNew.Price" id="exampleInputEmail1"/>
            </div>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Количество</label>
                <InputNumber class="form-control" @bind-Value="bookNew.Amount" id="exampleInputEmail1"/>
            </div>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </EditForm>
    </div>
}

@code {
    Book bookNew = new();
    bool IsLoading = true;
    private bool ShowGenres = false;

    string MessageError = "";
    bool HasError = false;
    bool CanEscape = true;

    private Dictionary<int, bool> checkedGenres = new();

    List<Author> authors = new();
    List<Genre> genres = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        authors = await dbcontext.Authors.ToListAsync();
        genres = await dbcontext.Genres.ToListAsync();
        foreach (var genre in genres)
        {
            checkedGenres.Add(genre.Id, false);
        }

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void BookCommit_change()
    {
        bookNew.Name = Regex.Replace(bookNew.Name, @"\s+", " ");
        if (bookNew.Name == "" || bookNew.Price < 0 || bookNew.Amount < 0)
        {
            MessageError = "Ошибка при сохранении";
            HasError = true;
            CanEscape = false;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            HasError = false;
            CanEscape = true;

            bookNew.Name = String.Join( ' ', bookNew.Name.Split());
            
            foreach (var id in checkedGenres.Where(x => x.Value).Select(x => x.Key))
            {
                bookNew.Genres.Add(genres.First(x => x.Id == id));
            }

            bookNew.LastRedactor = authService.CurrentUser!;

            bookNew.AuthorId ??= authors.First().Id;

            try
            {
                dbcontext.Update(bookNew);

                dbcontext.Logs.Add(new Log
                {
                    Operation = $"Добавлена книга с именем = {bookNew.Name}",
                    UserId = authService.CurrentUser!.Id,
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            await dbcontext.SaveChangesAsync();

            

            navigation.NavigateTo("books");
        }
    }

}