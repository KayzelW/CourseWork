@page "/books"
@using BookDesktop.Service
@using Classes
@using Microsoft.EntityFrameworkCore
@using System.Collections.ObjectModel
@using Microsoft.UI.Xaml.Controls
@inject AppDbContext dbcontext
@inject BinService bin

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="/personal_page">Главная страница</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/books">Каталог</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/bin">Корзина</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="d-flex">
    <div class="p-2 w-100">
        <h1>Книги</h1>
    </div>
    <div class="p-2 dropdown-center">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Фильтр
        </button>
        <ul class="dropdown-menu">
            @foreach (var genre in dbcontext.Genres.ToList())
            {
                <li>
                    <label class="dropdown-item">
                        <input type="checkbox" checked="@selectedGenres.Contains(genre)" @onchange="@(e => ToggleGenreFilter(genre))"/>
                        @genre
                    </label>
                </li>
            }
        </ul>
    </div>
    <div class="p-2 flex-shrink-1">
        <a class="btn btn-primary" href="/bin" role="button">Корзина</a>
    </div>
</div>


@if (IsLoading)
{
    <div>Загрузка</div>
}
else
{
    <table class="table table-bordered border-primary" aria-valuemin="200">
        <tr>
            <td>Наименование</td>
            <td>Автор</td>
            <td>Стоимость</td>
            <td>Экземпляры</td>
            <td>Действия</td>
        </tr>
        @foreach (var book in GetBooksWithFilter().Result)
        {
            <tr>
                <td>@book.Name</td>
                <td>@book.Author</td>
                <td>@book.Price</td>
                <td>@book.Amount</td>
                <td>
                    @if (bin.books.Any(x => x.Id == book.Id))
                    {
                        <button type="button" class="btn btn-warning" onclick="@(() => { ToggleBookBin(book); })">Удалить из корзины</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-warning" onclick="@(() => { ToggleBookBin(book); })">Добавить в корзину</button>
                    }
                </td>
            </tr>
        }
    </table>
}



@code {
    bool IsLoading = true;
    List<Book> books = new();
    List<Genre> genres = new();
    List<Genre> selectedGenres = new();

    async Task<List<Book>> GetBooksWithFilter()
    {
        if (selectedGenres.Count == 0)
            return books;

        var filteredBooks = await dbcontext.Books
            .Where(book => book.Genres.Any(bg => selectedGenres.Contains(bg.Genre)))
            .ToListAsync();

        return filteredBooks;
    }

    async Task Load()
    {
        books = await dbcontext.Books.ToListAsync();
        genres = await dbcontext.Genres.ToListAsync();

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(Load);
    }

    private void ToggleBookBin(Book book)
    {
        if (bin.books.Contains(book))
        {
            bin.books.Remove(book);
        }
        else
        {
            if (book.Amount > 0)
                bin.books.Add(book);
        }
        InvokeAsync(StateHasChanged);
    }

    private void ToggleGenreFilter(Genre genre)
    {
        if (selectedGenres.Contains(genre))
        {
            selectedGenres.Remove(genre);
        }
        else
        {
            selectedGenres.Add(genre);
        }
        InvokeAsync(StateHasChanged);
    }

}