@page "/books"
@using BookDesktop.Service
@using Classes
@using Microsoft.EntityFrameworkCore
@using System.Collections.ObjectModel
@using Microsoft.UI.Xaml.Controls
@inject AppDbContext dbcontext
@inject NavigationManager navigation
@inject AuthService authService
@inject BookChangeService bookChangeService

@if (IsLoading)
{
    <div>Загрузка</div>
}
else
{
    <Menu/>
    <div class="d-flex">
        <div class="p-2 w-100">
            <h1>Книги</h1>
        </div>
        <div class="p-2 dropdown-center">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Фильтр
            </button>
            <ul class="dropdown-menu">
                @foreach (var genre in dbcontext.Genres.ToList())
                {
                    <li>
                        <label class="dropdown-item">
                            <input type="checkbox" checked="@selectedGenres.Contains(genre)" @onchange="@(e => ToggleGenreFilter(genre))"/>
                            @genre
                        </label>
                    </li>
                }
            </ul>
        </div>
        @if (authService.CurrentUser.PermissionLvl != 1)
        {
            <div class="p-2 flex-shrink-2">
                <a class="btn btn-secondary" type="button" href="/book_add">Добавить</a>
            </div>
        }
    </div>

    <table class="table table-bordered border-primary" aria-valuemin="200">
        <tr>
            <td>Наименование</td>
            <td>Автор</td>
            <td>Стоимость</td>
            <td>Экземпляры</td>
            @if (authService.CurrentUser!.PermissionLvl != 1)
            {
                <td>Действия</td>
            }
        </tr>
        @foreach (var book in GetBooksWithFilter().Result)
        {
            <tr>
                <td>@book.Name</td>
                <td>@book.Author?.Name</td>
                <td>@book.Price</td>
                <td>@book.Amount</td>
                @if (authService.CurrentUser!.PermissionLvl != 1)
                {
                    <td>
                        <button type="button" class="btn btn-warning" onclick="@(() => { ChangeBook(book); })">Изменить</button>
                    </td>
                }
            </tr>
        }
    </table>
}


@code {
    bool IsLoading = true;
    List<Book> books = new();
    List<Genre> genres = new();
    List<Genre> selectedGenres = new();

    async Task<List<Book>> GetBooksWithFilter()
    {
        if (selectedGenres.Count == 0)
            return books;

        var filteredBooks = await dbcontext.Books
            .Include(x => x.Author)
            .Where(book => book.Genres.Any(bg => selectedGenres.Contains(bg)))
            .ToListAsync();

        return filteredBooks;
    }

    async Task Load()
    {
        books = await dbcontext.Books
            .Include(x => x.Author)
            .ToListAsync();
        genres = await dbcontext.Genres.ToListAsync();

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(Load);
    }

    private void ChangeBook(Book book)
    {
        navigation.NavigateTo($"book_redact/{book.Id}");
    }

    private void ToggleGenreFilter(Genre genre)
    {
        if (selectedGenres.Contains(genre))
        {
            selectedGenres.Remove(genre);
        }
        else
        {
            selectedGenres.Add(genre);
        }

        InvokeAsync(StateHasChanged);
    }

}